open and opinonated

resources have built in unit testing, do perf testing too. have a way to compare different versions of function.
look in to symbols (https://www.keithcirkel.co.uk/metaprogramming-in-es6-symbols/)

todos
- loading dependencies // they come from github, npm, locally, as resources and node modules, and we need a way to keep multiple versions of them.
- how does our apps file look given a dharma architecture.
- how to ship env specific private data to remote. e.g. ur prod api secret keys.
- build all configs.
 - dbs config w/ mongorules - make sure u can configure other db strategies.
 - ....
- build all resources.
  - services: export data
  - ...
- build all plugin interfaces
- build dharma
- env
  - when u get a env, (the value is an obj, but we want to filter and just return the value property, have it be an interface feature)
  - if a value is updated, make sure we can have update() callbacks, if someone updates the refresh value we want to react to that.
    - all values for resources have update callbacks, and when updated, it runs validation first, returns errors if shitty.
- resources.md
- brahma cli framework
- how to connect to a remote, and run `dharma status`
  - test SSH!
- adding brahma commands. how to do it? see settings - might want to do it somewhere else.
- merge functionality
- refactor remote.md in the context of an autoscaling dharma environment. do after i build dharma.
- how to install, and update, dependency versions. require a contrib dependency, where is the version stored, and how to update remote if we update the version.
  - what happens if an app plugin has a conflicting dependency.
- voice memos
- test functionality
- brahma-command-essentials. how to load more command plugins?

---

remote

remote plugins must have these methods (remote API)
- addSSHKeys
- removeSSHKeys
- listSSHKeys must return an Oject w/ required properties such as ID so we can remove key.

info command
- run via SSH
- logs: dependencies and versions, app.js config, server info, confirms security shit, ipv6

---

config
- injectables (loaded in this order)
  - settings.js (nothing)
  - variables.js: settings (no env, its static)
  - env.js: settings, variables,
  - apps.js: env, variables, settings
  - remote.js: env, variables, settings, apps (apps for the hell of it)
  - dbs.js: env, variables, settings, apps, remote
  - plugins.js: env, variables, settings, apps, remote, dbs
- @todo document injectables for each config. cli command to log out injectables for each
resource property of each resource type including config

- modules need a way to respond to changes in config. @todo

---

Server.

https://support.rackspace.com/how-to/checking-listening-ports-with-netstat/

ufw
- https://www.digitalocean.com/community/tutorials/how-to-set-up-a-firewall-with-ufw-on-ubuntu-14-04
- https://www.youtube.com/watch?v=fEwuvSbMImk

d.o account needs to be for each project.
- explain why in docs when done.

---

static asset / file storage
- i think s3 has private file storage.
- where do prod apps write to?
  - ./tmp - called tmp because once that remote server gets destroyed when u downscaled ur env, the data is gone.
  - need to write logs, cache, and other information on running apps.
    - apps should avoid writing to server for continunity - they are distributed.
  - would perfer to use s3 exculsivly for file writes
    - add s3 config to project setup if its necessary.
    - document why we dont like to handle static assets w/ node.
    - if not, need a local dir to write to.
- server file API .read() .readStream() - make sure ./tmp exists.

- ./static is readonly by convention? write to 'tmp'. @todo document
  - how to handle profile pic uploads, and updates to that upload?
    - s3. easy.
    - u couldn't write it to /tmp or anything local.
- @todo s3 integration

---

apps.js
- each property can have custom validation. e.g. ipv6 validates address.
- build process needs to DI data into our configs. by default we build for local, but `remote update` --env=remote0 will set activeEnv to remote0
- modules: http is a module, proxy is a module. modules define their data e.g. validate, defaults, and transform config. it does other shit too, idk rifht now tho.
- updating ur apps file, e.g. you enable cors, we need a way to download koa-cors when in watch mode

---

core utils
- provide utility functions for common things. build as i build hashcore.
- methods
  - ...methods from brahma utils
  - sanitize

---

env
- default propertie { overwrite: true, refresh: true }
  - constants are opt in. JS paradigm, data is mutateable by default.
  - performance is opt in, predictability and DX takes precedent here.

---

plugins

- brahma-app-documenation

- brahma-remote-digitalocean
  - https://github.com/matt-major/do-wrapper

- brahma-app-logs
 - like logdna. has database config.

- brahma-proxy-nginx
  - installs on same system if node === and newNode === true

- brahma-app-cron
  - https://github.com/kelektiv/node-cron
    - write custom wrapper over cronttab? i want to but how do u get it to work locally.
  - has a plugin for server refreshes - brahma-app-cron-plugin-refresh. the plugin basically adds endpoints (somehow) and probably a little config too. recursive architecture.

- brahma-database-mongodb
  - needs to hook into `generate` and register createSchema. fractal architecute?

- brahma-template-jsx

- brahma-library-essentials
  - request -> axios, adds as an injectable (@todo document adding an injectable)

- plugin status (or info?). run a status command, and view information about the plugin. e.g. if it registers helpers, what are these helpers.
- app plugins can have plugins.
- plugin that registers w/ the deploy pre hook to make sure u did a git tag before updating. can abort deploy.
  - not doing because tagging is going to be in core. but leave to make sure this would still be possible.
- plugins hook into status to talk about their system dependencies. e.g. brahma-database-mongodb wants mongod running - need to check (database-mongond integrates w/ serve which integreate w/ status to add a check for mongod).
- plugins document via API how theyre goning to modify your project. so they can say that their going to ad a dir in root or add a config file.
- docs - "integration" or "config"?
- should there be a generic way to create a custom plugin - one that doesnt have a type? hopefully we covered everything.
- brahma-command-git
- make sure plugins of type "app" have access to all other plugin hooks (i think)
  - they should have the ability to add commands for shit like database queries?
- i wanna see if i can do some fractal recursive architecture shit for app plugins.
- plugin updates? should we install a new version, run tests, install next plugin, tests, itteate? maybe new plugin version have update instructions. that could be a feature of resources, some update integration functionality.
- [brahma-build-humans](@todo) - hooks into build and adds a humans.txt w/ data from config. maybe make more generic, a project asset router - can add a humans from merge.
- for each recomended plugin, do an example in ./docs/plugins/examples/XXX and reference the example on the recomended plugins page.
- build plugin: brahma-build-packj
- app plugin: brahma-app-documentation hooks into status and registers a command to make sure a docs dir exists

plugin abilities
- plugins register abilites, view abilites w/ the info command.
so if u are using the cron plugin, it provides the ability to rotate logs, it just needs config.

- each plugin type has it's own interace / API - @todo build and document.

---

CLI framework
- run brahma outside a brahma app. make sure the message is appropiate.

functionality
- echo brahma version on startup
- helpers and generate and status group subcommands by module (modules hook into eachother and register subcommands)
- command queue/buffer
  - when ur downloading dependencies, users may want to take other actions, need to queue them.

dependencies
- https://github.com/SBoudrias/Inquirer.js

---

http
- optionally enables ipv6. checks server to make sure its enabled (we should try to do this alot, confirm remote server env and info).

---

private
- in .gitignore
- see ./config/private.js

---

assets
- asset config file. i like the idea of creating a map for assets, the obj can have props for static caching, like a cache id and shit.? a method that passes in a asset name and some other data and u return the path.

aliases?
- can't aliash injectables. want projects to be consistent.
- can't alias dirnames in settings config.

---

hooks (see notes why it's hooks vs callbacks)
- app.start
- app.stop
- app.update
- custom?
- ./callbacks or in callbacks.js export callbacks
- each cb has a pre and post method. can pass just a function to run

---

endpoints
- endpoints vs other resources. resources have access to other resources via DI, endpoints are special - they have can be accessed by other endpoints using the $call method.
- organization:
  - by app (./api, ./worker, ./...)
  - by type (./commands - bin commands, ./callbacks - called by one or more apps, ./router - output one ore more apps)
  - by collection (database driven design, ./employees, ./stores, ./tags)
  - @see readme.

---

caching
- for endpoints:
  - cache decorators. 'lcache' 'mcache' 'redis'

---

proxy
- brahma-proxy-nginx (apps.js proxy: true).
- @todo documentation on how to configure as a static asset cache.
- calls a generate hook, and adds a command that writes a nginx.conf into merge, so a user can roll their own custom conf.
- ...

---

info command
- seems like we are doing a lot w/ status.
- modules hook into info. callbacks are dynamic, takes params.
- like `helpers`, is organized into categories, each category is the name of the module that hooks into it.
  - u dont want to see a big list of helpers w/o some classification. group into modules. i want to see all the helpers for this plugin and that plugin.
- would be useful to log API details. all types of APIs, e.g. file helper API, resource API, load API,
remote
- i want the ability to identify a resource, and for each property, know what is injected.

---

generate command
- JSON form functionality - for mongorules, we need a repeating form - each schema item is a form, and it repeats until ur done.
  - mongorules needs to be able to hook into generate @todo

---

build
- may only need to build a single app and deploy everywhere. maybe there is no build, and we just pipe a read stream from core to our remotes.
- have a way to add files to apps. e.g. add humans.txt in app root (merge integration).

---

Dependency Pathing
- abs paths...
- 'a1': './services/a1'
- '{a1}': './services'
- '{callOnce}': './utils'
- 'callOnce': './utils/callOnce'
- u write it like this everywhere. in resources. in utils.

Route pathing
- endpoint "route" property to override default.

---

settings
- nodeVersion - not implemented, check to make sure node is of the proper version.
- require using 'const' - if we have a `require` field in our utils and resources
and we are importing a npm module, we are going to make it var by default, because
people will want to mutate data and if we dont there will be errors.

---

documentation
- cmd+shift+p search, bookmarking (localstorage), config accepts multiple sites, deploys to S3 (plugin)
- we want the ability for plugins to create their own site for documentation
or github repo at least.
- plugins can implement a docs property on our resource, but docs should be more than just
an explination of resources. how do u contribute a general comment on the architecture.
- integrate w/ gitbook

---

auth
- this is a very common problem. find a way to modularize and contribute.
- confirm email functionality and email
- forgot password functionality and email
- certain actions require reenter password. e.g. github delete repo. make sure there is either
a decorator or a plugin that does this.

---

load
- @todo needs a way to load from private github repos. theres the auth thing.
  - use SSH method (https://stackoverflow.com/questions/28728665/how-to-use-private-github-repo-as-npm-dependency)
- @todo build out resource methods (private, endpoint) // do at end after resources are built out.

---

static analyisis
- can check and make sure people are passing the proper number of params to functions
either when using $ctx, or when using pre() and post({}, args)
- { main(null, param) } // make sure u dont pass null. will error normally but the message sucks.

---

env

- naming
  - remote0
  - remote1
  - local

---

Renaming shit (@todo is this still relevant w/ dharma?)
- renaming a server (how does it affect the rest of your code - does the updating suck?)
  - would be awesome if we could identify the dependencies either though static analysis or otherwise
  - think what else do u rename and how to help w/ that.

---

apps to build
- brahma-website (make it functionally eq to rails).
  - templating integration
  - pulls docs dir from brahma github repo and builds static site. simple cli command to update site.
  - how to do links for shit in our markdown files?
- brahma-example-simple
  - loads plugins via plugins.js
- brahma-example-advanced
  - worker
  - router
  - cron
  - smtp
  - realtime
  - ...requires all plugins and config (plugins are local in ./plugins)

---

youtube videos
- general
- documentation rundown
- architectural discusssion
- demo w/ corey
- beginner screencast - very detailed?
- how to build a simple website - inspired by rails
- how to build some complex shit
- server performance - compare my server setup to a nginx round robbin setup for perf.
- security
show the results in the beginning then after show low-level how each server env is configured.
- small videos
  - how we manage private data
  - ... @todo
- * make a bunch of little videos so people can easily find out how to do shit. can also make a big video too and cut clips out from it.
- * videos do that zoom in shit, like they zoom in on close shit. not essential.
- * spongebob X days later
- * play elevator music when im writing code.
- * for each demo app, do a creation montage each w/ a cool song. (slow burn, ...)
---

Most likely going to need built in perf testing.
- need to calc perfAvg for load balancer
- need to calibrate the server system (can also fork requests from active LB to new but offline LB)

---

Local functionality vs third party

third party
- serving assets (s3)
- smtp relay (mailgun)
- logs (logdna)
- db (mongo)
- key value cache (redis)
- ...

---

make sure...
- when building cli framework "commands" module
  - design helpers, generate, status, info, test, to be implemented by a plugin ecosystem.
- how would a website load CSS and JS (@todo for brahma-website). get fast css reloads working.
- DX. devs should be able to know how to use an api w/ a simple console.log. e.g. console.log(obj.api)
- update the technologies list in the Readme.
- varnish cache (w. nginx) web pages.
- we can load and send (stream too) a static asset
- api route prefix w/ version. - give a general way for them to modify koa - via start hook.
- the apps should be able to start themselves given an app.js file and other configs.
dont compile too much. the idea is for redeployment we want to just upload the configs and resources.
- keep integrations modular. abstract out modules like mongorules and make the their own github repos e.g. brahma-mongorules?, brahma-...
- static assets w/ ID caching. make sure this is a technique people will be able to implement.
- should the app server be its own module? build it and see what it would take
- try to connect to servers using ssh and ur ssh key.
- auto install dependencies.
- use koa1.x and koa2.x in the same project but on seprate apps (if a dependent is requring w/o sepcifiying a version obs return the greater version).
- for stuff u gotta write a lot make sure then names are brief. i would use 'docs' over 'documentation' as the name for an object property.
- if i end up using regex, wrap it in a utility function. it's just so gross.
- fast. local updates are fast. remote updates are fast.
- u can upload images from a website and throw it in S3
- it has a good way to reuse common functionality across projects like forgot password functionality
- i can write have an app create a rails site and use custom routing, custom index page, custom about page.
- check remote file permissions for app files.
- database pattern - put decoupled data in its own DB for scaling. w/ mongo u dont do joins, so take advantage of this.
- theres a way to write streaming services. e.g. streaming audio and video.

---

functionality looking for use cases:
- pre() post() ???
- different file names and object name.
- custom brahma command.
- passing "apps" into remote.js and other config injectables

---

Brahma dev todos

make a logs and errors file full of functions for consistent formatting.
- outputs logs and errors given messages.

---

Brahma website

- built w/ brahma
- https://codepen.io/john052/pen/KzIfb?page=4

---

NodeJS strengths and weakenssses
- https://stackoverflow.com/questions/9967887/node-js-itself-or-nginx-frontend-for-serving-static-files

---

needed functionality
- want a way to prefix all routes w/ api version or whatever.
- need to know how route matches are handled when there are matching multiple endpoints.
- debug integration? (tj's npm module)
- sitemap?
- reading deploy output. u could be deploying 10 apps at a time, buffer the logs, and only show one app at a time.

---

long todos
- use the word paradigm more in docs. paradigm shifting framework.
- if ur writing a rails type app, and u go to a URL, and theres errors, send down one of those pretty error templates
- how would u write a front-end app like react or something? (not super important - maybe there should be a way to build a framework for shit like this that integrates w/ brahma!)
- unit tests (objAssignDeep)
- update repo keywords
- \n -> EOL
- "sponsors" and "backers" section on Readme (see koa)
- handling video and audio streams.
- remove brahma-documenation repo? (if were not gonna use it)
- find a way to keep your code DRY across multiple brahma projects.
- vultr API has methods like /server/start that restart a box - can we disable this?
- how would u distribute brahma across multiple data centers, e.g. deploy project to a US East and US West infastructure.

---

Upgrading w/ breaking changes.
- when we create a 1.x if there are breaking changes do this:
create a new GH repos called brahma-1 and bramha-0.
bramha is the same as bramha-0.
after a while make bramha eql to bramha-1

---

Maya
- you want your routes local to your maya project, but that data is also needed by
your API server -> maya can locally integrate w/ brahma, and using the data in the maya project,
it creates a custom app plugin for Mayas API.
-

---
